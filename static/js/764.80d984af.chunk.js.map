{"version":3,"file":"static/js/764.80d984af.chunk.js","mappings":"iOAwDA,UApDA,WACE,IAAMA,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACXC,EAAc,IAAIC,gBAAgBL,EAASM,QAAQC,IAAI,gBAAkB,GAC/EC,GAA0CC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/CI,EAAaF,EAAA,GAAEG,EAAgBH,EAAA,GAwBtC,OAtBAI,EAAAA,EAAAA,YAAU,WACR,GAAIV,EAAa,CAEf,IAAMW,EAAW,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAF,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEOC,EAAAA,EAAAA,IAAU,4CAA6C,CAC5EC,OAAQ,CACNC,QAAS,mCACTC,MAAOvB,KAER,KAAD,EALIgB,EAAQC,EAAAO,KAOdf,EAAiBO,EAASS,KAAKC,SAAST,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAU,GAAAV,EAAA,SAExCW,QAAQC,MAAM,8BAA6BZ,EAAAU,IAAS,yBAAAV,EAAAa,OAAA,GAAAf,EAAA,kBAEvD,kBAbgB,OAAAH,EAAAmB,MAAA,KAAAC,UAAA,KAejBrB,GACF,CACF,GAAG,CAACX,KAGFiC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,mBACJC,EAAAA,EAAAA,KAAA,SACEC,KAAK,OACLC,YAAY,uBACZC,MAAOtC,EACPuC,SAAU,SAACC,GACT,IAAMC,EAAiBD,EAAEE,OAAOJ,MAChCxC,EAAS,uBAAD6C,OAAwBF,GAClC,KAEFN,EAAAA,EAAAA,KAAA,UAAQS,QAAS,kBAAM9C,EAAS,uBAAyBE,EAAY,EAACkC,SAAC,YACvEC,EAAAA,EAAAA,KAAA,MAAAD,SACG1B,EAAcqC,KAAI,SAACC,GAAM,OACxBX,EAAAA,EAAAA,KAAA,MAAAD,UACEC,EAAAA,EAAAA,KAACY,EAAAA,GAAI,CAACC,GAAE,WAAAL,OAAaG,EAAOG,IAAKf,SAAEY,EAAOI,SADnCJ,EAAOG,GAEX,QAKf,C","sources":["pages/Movies.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Link, useLocation, useNavigate } from 'react-router-dom';\n\nfunction Movies() {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const searchQuery = new URLSearchParams(location.search).get('searchQuery') || '';\n  const [searchResults, setSearchResults] = useState([]);\n\n  useEffect(() => {\n    if (searchQuery) {\n\n      const fetchMovies = async () => {\n        try {\n          const response = await axios.get('https://api.themoviedb.org/3/search/movie', {\n            params: {\n              api_key: 'fcc6b33c410a16ddfc5977938f0cf7d9',\n              query: searchQuery,\n            },\n          });\n  \n          setSearchResults(response.data.results);\n        } catch (error) {\n          console.error('Error searching for movies:', error);\n        }\n      };\n  \n      fetchMovies();\n    }\n  }, [searchQuery]);\n\n  return (\n    <div>\n      <h1>Search Movies</h1>\n      <input\n        type=\"text\"\n        placeholder=\"Search for movies...\"\n        value={searchQuery}\n        onChange={(e) => {\n          const newSearchQuery = e.target.value;\n          navigate(`/movies?searchQuery=${newSearchQuery}`);\n        }}\n      />\n      <button onClick={() => navigate('/movies?searchQuery=' + searchQuery)}>Search</button>\n      <ul>\n        {searchResults.map((result) => (\n          <li key={result.id}>\n            <Link to={`/movies/${result.id}`}>{result.title}</Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default Movies;"],"names":["location","useLocation","navigate","useNavigate","searchQuery","URLSearchParams","search","get","_useState","useState","_useState2","_slicedToArray","searchResults","setSearchResults","useEffect","fetchMovies","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","response","_context","prev","next","axios","params","api_key","query","sent","data","results","t0","console","error","stop","apply","arguments","_jsxs","children","_jsx","type","placeholder","value","onChange","e","newSearchQuery","target","concat","onClick","map","result","Link","to","id","title"],"sourceRoot":""}